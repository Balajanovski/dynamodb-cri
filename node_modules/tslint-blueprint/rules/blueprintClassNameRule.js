/**
 * @license
 * Copyright 2017 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var ts = require("typescript");
var guards_1 = require("../guards");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithFunction(sourceFile, walk);
    };
    return Rule;
}(Lint.Rules.AbstractRule));
/* tslint:disable:object-literal-sort-keys */
Rule.metadata = {
    ruleName: "blueprint-class-name",
    description: "Checks for Blueprint class names that are expressed as string literals",
    descriptionDetails: (_a = ["Using string literals instead of a constant from @blueprintjs/core's Classes or IconClasses\n            is prone to typos and prevents compile-time validation of the CSS class's existence."], _a.raw = ["Using string literals instead of a constant from @blueprintjs/core's Classes or IconClasses\n            is prone to typos and prevents compile-time validation of the CSS class's existence."], Lint.Utils.dedent(_a)),
    options: null,
    optionsDescription: "",
    optionExamples: ["true"],
    type: "maintainability",
    typescriptOnly: false,
};
/* tslint:enable:object-literal-sort-keys */
Rule.FAILURE_STRING = "Use a constant from Classes or IconClasses instead of a string literal";
exports.Rule = Rule;
function walk(ctx) {
    return ts.forEachChild(ctx.sourceFile, callback);
    function callback(node) {
        if (guards_1.nodeIsKind(node, ts.SyntaxKind.StringLiteral)) {
            var text = node.text;
            if ((text !== "pt-" && text.startsWith("pt-")) || (text !== ".pt-" && text.startsWith(".pt-"))) {
                return ctx.addFailureAtNode(node, Rule.FAILURE_STRING);
            }
        }
        return ts.forEachChild(node, callback);
    }
}
var _a;
